var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Here, you can see the documentation for each function provided by AuditorySignalUtils.jl.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = AuditorySignalUtils","category":"page"},{"location":"reference/#Synthesis","page":"Reference","title":"Synthesis","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Synthesize stimuli.  Right now just ramps and pure tones.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"pure_tone\ncosine_ramp","category":"page"},{"location":"reference/#AuditorySignalUtils.pure_tone","page":"Reference","title":"AuditorySignalUtils.pure_tone","text":"pure_tone(freq, phase, dur, fs)\n\nSynthesizes a pure tone with specified frequency, phase offset (in radians), duration, and sampling rate\n\n\n\n\n\n","category":"function"},{"location":"reference/#AuditorySignalUtils.cosine_ramp","page":"Reference","title":"AuditorySignalUtils.cosine_ramp","text":"cosine_ramp(signal, dur_ramp, fs)\n\nApplies a raised-cosine ramp to the input signal, where dur_ramp is the duration of each samp segment in seconds\n\n\n\n\n\n","category":"function"},{"location":"reference/#Digital-signal-processing-tools","page":"Reference","title":"Digital signal processing tools","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Various functions to handle things like calculating rms, setting levels, etc.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"rms\ndbspl\nscale_dbspl\namplify","category":"page"},{"location":"reference/#AuditorySignalUtils.rms","page":"Reference","title":"AuditorySignalUtils.rms","text":"rms(signal)\n\nCalculates the room-mean-square (RMS) of a signal\n\n\n\n\n\n","category":"function"},{"location":"reference/#AuditorySignalUtils.dbspl","page":"Reference","title":"AuditorySignalUtils.dbspl","text":"dbspl(signal)\n\nCalculates the dB SPL value of a signal (assuming that the units of the signal are in Pa)\n\n\n\n\n\n","category":"function"},{"location":"reference/#AuditorySignalUtils.scale_dbspl","page":"Reference","title":"AuditorySignalUtils.scale_dbspl","text":"scale_dbspl(signal, dB)\n\nAdjusts a signals level to be a certain level in dB SPL\n\n\n\n\n\n","category":"function"},{"location":"reference/#AuditorySignalUtils.amplify","page":"Reference","title":"AuditorySignalUtils.amplify","text":"amplify(signal, dB)\n\nAmplifies a signal (in terms of power) by an amount in dB (or attenuates the signal if dB is negative)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Other-utilities","page":"Reference","title":"Other utilities","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Various functions I frequently need and don't want to redefine in every file.","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"LogRange","category":"page"},{"location":"reference/#AuditorySignalUtils.LogRange","page":"Reference","title":"AuditorySignalUtils.LogRange","text":"LogRange(a, b, n)\n\nCreates a vector with n elements spaced logarithmically from a to b\n\n\n\n\n\n","category":"function"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"AuditorySignalUtils.jl is a Julia package that impelments many of the types of signal processing primitives commonly used in psychoacoustics. For example, using AuditorySignalUtils, it is easy to synthesize combinations of tones, set them at particular levels in terms of dB SPL, and add an on/off ramp.  This is the documentation for AuditorySignalUtils.jl, and here you can learn about how to use the package and access information about details of the underlying code. Presently, AuditorySignalUtils only provides a handful of functions, but more will be added over time if I continue to do auditory work in Julia!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CurrentModule = AuditorySignalUtils","category":"page"}]
}
